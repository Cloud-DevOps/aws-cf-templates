---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS: service that runs on an ECS cluster based on ecs/cluster.yaml and uses a dedicated ALB, a cloudonaut.io template'
# TODO Certificate parameter to support 443
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
      - ParentClusterStack
      - ParentAuthProxyStack
    - Label:
        default: 'Load Balancer Parameters'
      Parameters:
      - ServiceLoadBalancerELBScheme
    - Label:
        default: 'Task Parameters'
      Parameters:
      - TaskDefinitionArn
      - DesiredCount
      - MaxCapacity
      - MinCapacity
      - ContainerPort
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentClusterStack:
    Description: 'Stack name of parent Cluster stack based on ecs/cluster.yaml template.'
    Type: String
  ParentAuthProxyStack:
    Description: 'Optional Stack name of parent auth proxy stack based on security/auth-proxy-*.yaml template.'
    Type: String
    Default: ''
  ServiceLoadBalancerELBScheme:
    Description: 'Indicates whether the load balancer in front of the ECS cluster is internet-facing or internal.'
    Type: String
    Default: 'internet-facing'
    AllowedValues:
    - 'internet-facing'
    - internal
  TaskDefinitionArn:
    Description: 'The ARN of the task definition (including the revision number) that you want to run on the cluster, such as arn:aws:ecs:us-east-1:123456789012:task-definition/mytask:3.'
    Type: String
  DesiredCount:
    Description: 'The number of simultaneous tasks, which you specify by using the TaskDefinition property, that you want to run on the cluster.'
    Type: Number
    Default: 1
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  MaxCapacity:
    Description: 'The maximum number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 4
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  MinCapacity:
    Description: 'The minimum number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 1
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  ContainerPort:
    Description: 'The port number on the container to direct load balancer traffic to. Your container instances must allow ingress traffic on this port.'
    Type: Number
    Default: 80
    ConstraintDescription: 'Must be in the range [0-65535]'
    MinValue: 0
    MaxValue: 65535
Mappings: {}
Conditions:
  HasAuthProxySecurityGroup: !Not [!Equals [!Ref ParentAuthProxyStack, '']]
  HasNotAuthProxySecurityGroup: !Equals [!Ref ParentAuthProxyStack, '']
  HasServiceLoadBalancerELBSchemeInternal: !Equals [!Ref ServiceLoadBalancerELBScheme, 'internal']
Resources:
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'ecs-cluster-alb'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
  ALBSecurityGroupInWorld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasNotAuthProxySecurityGroup
    Properties:
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: '0.0.0.0/0'
  ALBSecurityGroupInAuthProxy:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasAuthProxySecurityGroup
    Properties:
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        'Fn::ImportValue': !Sub '${ParentAuthProxyStack}-SecurityGroup'
  ServiceLoadBalancerTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 4
      VpcId:
        'Fn::ImportValue': !Sub '${ParentClusterStack}-VPC'
  ServiceLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: !Ref ServiceLoadBalancerELBScheme
      SecurityGroups:
      - !Ref ALBSecurityGroup
      Subnets: !If
      - HasServiceLoadBalancerELBSchemeInternal
      - - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetAPrivate'
        - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetBPrivate'
      - - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetAPublic'
        - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetBPublic'
  ServiceLoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref ServiceLoadBalancerTargetGroup
        Type: forward
      LoadBalancerArn: !Ref ServiceLoadBalancer
      Port: 80
      Protocol: HTTP
  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ecs.amazonaws.com'
          Action: 'sts:AssumeRole'
  Service:
    Type: 'AWS::ECS::Service'
    DependsOn: ServiceLoadBalancerListener
    Properties:
      Cluster:
        'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref DesiredCount
      LoadBalancers:
      - ContainerName: main
        ContainerPort: !Ref ContainerPort
        TargetGroupArn: !Ref ServiceLoadBalancerTargetGroup
      Role: !GetAtt 'ServiceRole.Arn'
      TaskDefinition: !Ref TaskDefinitionArn
  ScalableTargetRole: # based on http://docs.aws.amazon.com/AmazonECS/latest/developerguide/autoscale_IAM_role.html
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'application-autoscaling.amazonaws.com'
          Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: ecs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ecs:DescribeServices'
            - 'ecs:UpdateService'
            Resource: '*'
      - PolicyName: cloudwatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'cloudwatch:DescribeAlarms'
            Resource: '*'
  ScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: !Ref MaxCapacity
      MinCapacity: !Ref MinCapacity
      ResourceId: !Sub
      - 'service/${Cluster}/${Service}'
      - Cluster:
          'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'
        Service: !GetAtt 'Service.Name'
      RoleARN: !GetAtt 'ScalableTargetRole.Arn'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
  ScaleUpPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-up'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration: 
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 25
  ScaleDownPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-down'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration: 
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: -25
  CPUUtilizationHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Service is running out of CPU'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value:
          'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 80
      AlarmActions:
      - !Ref ScaleUpPolicy
  CPUUtilizationLowAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Service is wasting CPU'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value:
          'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: CPUUtilization
      ComparisonOperator: LessThanThreshold
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 20
      AlarmActions:
      - !Ref ScaleDownPolicy
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id'
    Value: 'ecs/service-dedicated-alb'
  DNSName:
    Description: 'The DNS name for the ECS cluster/service load balancer.'
    Value: !GetAtt 'ServiceLoadBalancer.DNSName'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  URL:
    Description: 'URL to the ECS service.'
    Value: !Sub 'http://${ServiceLoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-URL'
